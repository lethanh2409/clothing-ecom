import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed...');

  // ================================
  // 1. Roles
  // ================================
  console.log('üìù Seeding roles...');
  const adminRole = await prisma.roles.upsert({
    where: { role_name: 'ADMIN' },
    update: {},
    create: { role_name: 'ADMIN', description: 'Qu·∫£n tr·ªã h·ªá th·ªëng' },
  });

  const staffRole = await prisma.roles.upsert({
    where: { role_name: 'STAFF' },
    update: {},
    create: { role_name: 'STAFF', description: 'Nh√¢n vi√™n v·∫≠n h√†nh' },
  });

  const customerRole = await prisma.roles.upsert({
    where: { role_name: 'CUSTOMER' },
    update: {},
    create: { role_name: 'CUSTOMER', description: 'Kh√°ch h√†ng' },
  });

  // ================================
  // 2. Users
  // ================================
  console.log('üë§ Seeding users...');
  const hashedPassword = await bcrypt.hash('password123', 10);

  const admin = await prisma.users.upsert({
    where: { username: 'admin' },
    update: {},
    create: {
      username: 'admin',
      password: hashedPassword,
      email: 'admin@demo.vn',
      phone: '0900000001',
      full_name: 'Qu·∫£n Tr·ªã',
    },
  });

  const staff1 = await prisma.users.upsert({
    where: { username: 'staff1' },
    update: {},
    create: {
      username: 'staff1',
      password: hashedPassword,
      email: 'staff1@demo.vn',
      phone: '0900000002',
      full_name: 'Nh√¢n Vi√™n 1',
    },
  });

  const customers: any[] = [];
  for (let i = 1; i <= 5; i++) {
    const customer = await prisma.users.upsert({
      where: { username: `khach${i}` },
      update: {},
      create: {
        username: `khach${i}`,
        password: hashedPassword,
        email: `khach${i}@demo.vn`,
        phone: `090000000${i + 2}`,
        full_name: `Nguy·ªÖn VƒÉn ${String.fromCharCode(64 + i)}`,
      },
    });
    customers.push(customer);
  }

  // ================================
  // 3. User Roles
  // ================================
  console.log('üîó Mapping user roles...');
  await prisma.user_role.createMany({
    data: [
      { user_id: admin.user_id, role_id: adminRole.role_id },
      { user_id: admin.user_id, role_id: staffRole.role_id },
      { user_id: staff1.user_id, role_id: staffRole.role_id },
      ...customers.map((c) => ({ user_id: c.user_id, role_id: customerRole.role_id })),
    ],
    skipDuplicates: true,
  });

  // ================================
  // 4. Customers
  // ================================
  console.log('üë• Seeding customers...');
  const genders = ['male', 'female', 'male', 'male', 'female'];
  const customerRecords: any[] = [];

  for (let i = 0; i < customers.length; i++) {
    const customerRecord = await prisma.customers.upsert({
      where: { user_id: customers[i].user_id },
      update: {},
      create: {
        user_id: customers[i].user_id,
        birthday: new Date(1999 + i, 8 + i, 9 + i),
        gender: genders[i] as any,
      },
    });
    customerRecords.push(customerRecord);
  }

  // ================================
  // 5. Addresses
  // ================================
  console.log('üìç Seeding addresses...');
  const addressesData = [
    {
      customerIdx: 0,
      name: 'Nguy·ªÖn VƒÉn A',
      phone: '0900000003',
      province: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
      district: 'Qu·∫≠n 1',
      ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
      street: 'L√™ L·ª£i',
      house: '12A',
      default: true,
    },
    {
      customerIdx: 0,
      name: 'Nguy·ªÖn VƒÉn A',
      phone: '0900000003',
      province: 'Th√†nh ph·ªë H√† N·ªôi',
      district: 'Qu·∫≠n Ho√†n Ki·∫øm',
      ward: 'Ph∆∞·ªùng C·ª≠a Nam',
      street: 'Tr√†ng Ti·ªÅn',
      house: '22',
      default: false,
    },
    {
      customerIdx: 1,
      name: 'L√™ VƒÉn Z',
      phone: '0900000011',
      province: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
      district: 'Qu·∫≠n B√¨nh Th·∫°nh',
      ward: 'Ph∆∞·ªùng 17',
      street: 'Nguy·ªÖn C·ª≠u V√¢n',
      house: '63',
      default: true,
    },
  ];

  for (const addr of addressesData) {
    await prisma.addresses.create({
      data: {
        customer_id: customerRecords[addr.customerIdx].customer_id,
        consignee_name: addr.name,
        consignee_phone: addr.phone,
        province: addr.province,
        district: addr.district,
        ward: addr.ward,
        street: addr.street,
        house_num: addr.house,
        is_default: addr.default,
      },
    });
  }

  // ================================
  // 6. Brands
  // ================================
  console.log('üè∑Ô∏è  Seeding brands...');
  const brandsData = [
    { name: 'Adidas', slug: 'adidas', desc: 'Th∆∞∆°ng hi·ªáu th·ªÉ thao qu·ªëc t·∫ø' },
    { name: 'Nike', slug: 'nike', desc: 'Just Do It - Th·ªÉ thao h√†ng ƒë·∫ßu' },
    { name: 'Uniqlo', slug: 'uniqlo', desc: 'Th·ªùi trang Nh·∫≠t B·∫£n' },
    { name: 'H&M', slug: 'h-m', desc: 'Fast fashion Sweden' },
    { name: 'Zara', slug: 'zara', desc: 'Th·ªùi trang T√¢y Ban Nha' },
    { name: 'Lacoste', slug: 'lacoste', desc: 'French sportswear elegance' },
    { name: 'The Bad Habit', slug: 'the-bad-habit', desc: 'Th∆∞∆°ng hi·ªáu local brand' },
    { name: 'Ssstuter', slug: 'ssstuter', desc: 'Th∆∞∆°ng hi·ªáu local brand' },
    { name: 'Degrey', slug: 'degrey', desc: 'Th∆∞∆°ng hi·ªáu local brand' },
    { name: 'Coolmate', slug: 'coolmate', desc: 'Th∆∞∆°ng hi·ªáu local brand' },
  ];

  const brands: any[] = [];
  for (const b of brandsData) {
    const brand = await prisma.brands.upsert({
      where: { slug: b.slug },
      update: {},
      create: { brand_name: b.name, slug: b.slug, description: b.desc },
    });
    brands.push(brand);
  }

  // ================================
  // 7. Sizes cho t·∫•t c·∫£ brands
  // ================================
  console.log('üìè Seeding sizes...');

  const adidasSizes = [
    {
      gender: 'male',
      label: 'S',
      height: '1m60‚Äì1m68',
      weight: '50‚Äì60kg',
      measurements: { chest: 50, shoulder: 46, length: 68 },
    },
    {
      gender: 'male',
      label: 'M',
      height: '1m68‚Äì1m75',
      weight: '60‚Äì70kg',
      measurements: { chest: 52, shoulder: 48, length: 70 },
    },
    {
      gender: 'male',
      label: 'L',
      height: '1m75‚Äì1m82',
      weight: '70‚Äì80kg',
      measurements: { chest: 54, shoulder: 50, length: 72 },
    },
    {
      gender: 'male',
      label: 'XL',
      height: '1m82‚Äì1m90',
      weight: '80‚Äì90kg',
      measurements: { chest: 56, shoulder: 52, length: 74 },
    },
    {
      gender: 'female',
      label: 'S',
      height: '1m50‚Äì1m58',
      weight: '40‚Äì50kg',
      measurements: { chest: 46, shoulder: 42, length: 64 },
    },
    {
      gender: 'female',
      label: 'M',
      height: '1m58‚Äì1m65',
      weight: '50‚Äì60kg',
      measurements: { chest: 48, shoulder: 44, length: 66 },
    },
    {
      gender: 'female',
      label: 'L',
      height: '1m65‚Äì1m72',
      weight: '60‚Äì70kg',
      measurements: { chest: 50, shoulder: 46, length: 68 },
    },
    {
      gender: 'female',
      label: 'XL',
      height: '1m72‚Äì1m80',
      weight: '70‚Äì80kg',
      measurements: { chest: 52, shoulder: 48, length: 70 },
    },
  ];

  for (const size of adidasSizes) {
    await prisma.sizes.create({
      data: {
        brand_id: brands[0].brand_id,
        gender: size.gender,
        size_label: size.label,
        height_range: size.height,
        weight_range: size.weight,
        measurements: size.measurements,
      },
    });
  }

  // ================================
  // 8. Categories
  // ================================
  console.log('üìÇ Seeding categories...');
  const catDoNam = await prisma.categories.create({
    data: { category_name: 'ƒê·ªì nam', slug: 'do-nam', description: 'Danh m·ª•c ƒë·ªì nam' },
  });

  const catDoNu = await prisma.categories.create({
    data: { category_name: 'ƒê·ªì n·ªØ', slug: 'do-nu', description: 'Danh m·ª•c ƒë·ªì n·ªØ' },
  });

  await prisma.categories.createMany({
    data: [
      {
        category_name: '√Åo thun nam',
        slug: 'ao-thun-nam',
        description: 'T-shirt, tank top',
        parent_id: catDoNam.category_id,
      },
      {
        category_name: '√Åo s∆° mi nam',
        slug: 'ao-so-mi-nam',
        description: 'Shirt formal, casual',
        parent_id: catDoNam.category_id,
      },
      {
        category_name: 'Qu·∫ßn short nam',
        slug: 'quan-short-nam',
        description: 'Summer shorts',
        parent_id: catDoNam.category_id,
      },
      {
        category_name: '√Åo thun n·ªØ',
        slug: 'ao-thun-nu',
        description: 'T-shirt, tank top',
        parent_id: catDoNu.category_id,
      },
      {
        category_name: '√Åo s∆° mi n·ªØ',
        slug: 'ao-so-mi-nu',
        description: 'Shirt formal, casual',
        parent_id: catDoNu.category_id,
      },
      {
        category_name: 'Qu·∫ßn short n·ªØ',
        slug: 'quan-short-nu',
        description: 'Summer shorts',
        parent_id: catDoNu.category_id,
      },
    ],
  });

  // ================================
  // 9. Products
  // ================================
  console.log('üì¶ Seeding products...');

  const categories = await prisma.categories.findMany();
  const catAoThunNam = categories.find((c) => c.slug === 'ao-thun-nam');
  const catAoThunNu = categories.find((c) => c.slug === 'ao-thun-nu');

  const prod1 = await prisma.products.create({
    data: {
      brand_id: brands[0].brand_id,
      category_id: catAoThunNu!.category_id,
      product_name: 'GFX SAIGON 2 TEE WM',
      slug: 'gfx-saigon-2-tee-wm',
      description: '√Åo thun n·ªØ Adidas cao c·∫•p',
    },
  });

  const prod2 = await prisma.products.create({
    data: {
      brand_id: brands[0].brand_id,
      category_id: catAoThunNam!.category_id,
      product_name: 'GFX SAIGON 2 TEE M',
      slug: 'gfx-saigon-2-tee-m',
      description: '√Åo thun nam Adidas cao c·∫•p',
    },
  });

  // ================================
  // 10. Product Variants
  // ================================
  console.log('üè∑Ô∏è  Seeding product variants...');

  const adidasMaleSizes = await prisma.sizes.findMany({
    where: { brand_id: brands[0].brand_id, gender: 'male' },
  });

  const adidasFemaleSizes = await prisma.sizes.findMany({
    where: { brand_id: brands[0].brand_id, gender: 'female' },
  });

  for (const size of adidasFemaleSizes) {
    await prisma.product_variants.create({
      data: {
        product_id: prod1.product_id,
        size_id: size.size_id,
        sku: `ADIDAS-GFXTEE-WM-BLK-${size.size_label}`,
        cost_price: 200000,
        base_price: 450000,
        quantity: 50,
        attribute: { color: 'Black', gender: 'Women', size: size.size_label },
      },
    });
  }

  for (const size of adidasMaleSizes) {
    await prisma.product_variants.create({
      data: {
        product_id: prod2.product_id,
        size_id: size.size_id,
        sku: `ADIDAS-GFXTEE-M-WHT-${size.size_label}`,
        cost_price: 200000,
        base_price: 450000,
        quantity: 50,
        attribute: { color: 'White', gender: 'Men', size: size.size_label },
      },
    });
  }

  // ================================
  // 11. Vouchers
  // ================================
  console.log('üéüÔ∏è  Seeding vouchers...');
  await prisma.vouchers.createMany({
    data: [
      {
        title: 'Giam10',
        description: 'Gi·∫£m 10% ƒë∆°n t·ª´ 300k',
        discount_type: 'percent',
        discount_value: 10,
        min_order_value: 300000,
        max_discount: 50000,
        quantity: 100,
      },
      {
        title: 'Tru50000',
        description: 'Gi·∫£m 50k ƒë∆°n t·ª´ 400k',
        discount_type: 'fixed',
        discount_value: 50000,
        min_order_value: 400000,
        max_discount: 50000,
        quantity: 50,
      },
    ],
  });

  // ================================
  // 12. Site Contents (FAQ, Policies)
  // ================================
  console.log('üìÑ Seeding site_contents (FAQ, Policies)...');

  const siteContents = [
    // FAQ
    {
      slug: 'faq-shipping-time',
      title: 'Th·ªùi gian giao h√†ng bao l√¢u?',
      content: `Ch√∫ng t√¥i cung c·∫•p giao h√†ng mi·ªÖn ph√≠ cho c√°c ƒë∆°n h√†ng t·ª´ 100,000 VND.

Th·ªùi gian giao h√†ng:
- H√† N·ªôi & TP.HCM: 2-3 ng√†y l√†m vi·ªác
- C√°c t·ªânh kh√°c: 3-5 ng√†y l√†m vi·ªác
- Giao h√†ng ngo√†i gi·ªù h√†nh ch√≠nh: +1 ng√†y

L∆∞u √Ω: Th·ªùi gian t√≠nh t·ª´ l√∫c ƒë∆°n h√†ng ƒë∆∞·ª£c x√°c nh·∫≠n thanh to√°n.`,
      category: 'FAQ',
      tags: ['giao-hang', 'shipping', 'thoi-gian'],
    },
    {
      slug: 'faq-return-policy',
      title: 'Ch√≠nh s√°ch ho√†n tr·∫£ nh∆∞ th·∫ø n√†o?',
      content: `Ch√∫ng t√¥i c·∫•p 30 ng√†y ho√†n ti·ªÅn ho√†n to√†n n·∫øu b·∫°n kh√¥ng h√†i l√≤ng.

ƒêi·ªÅu ki·ªán ho√†n tr·∫£:
- H√†ng h√≥a ph·∫£i ·ªü t√¨nh tr·∫°ng nguy√™n b·∫£n
- Ch∆∞a s·ª≠ d·ª•ng ho·∫∑c gi·∫∑t
- C√≤n tag v√† packaging g·ªëc
- Ho√†n ti·ªÅn trong 5-7 ng√†y l√†m vi·ªác

Ho√†n tr·∫£ mi·ªÖn ph√≠:
- Ch√∫ng t√¥i cung c·∫•p nh√£n v·∫≠n chuy·ªÉn mi·ªÖn ph√≠
- Kh√¥ng h·ªèi l√Ω do ho√†n tr·∫£`,
      category: 'FAQ',
      tags: ['hoan-tra', 'return', 'chinh-sach'],
    },
    {
      slug: 'faq-sizing-guide',
      title: 'C√°ch ch·ªçn size ph√π h·ª£p?',
      content: `ƒê·ªÉ ch·ªçn size ph√π h·ª£p, b·∫°n c·∫ßn bi·∫øt:
- Chi·ªÅu cao (cm)
- C√¢n n·∫∑ng (kg)
- C√°c s·ªë ƒëo c∆° th·ªÉ (ng·ª±c, vai, d√†i √°o)

H∆∞·ªõng d·∫´n ch·ªçn size:
1. Xem b·∫£ng size chi ti·∫øt theo t·ª´ng th∆∞∆°ng hi·ªáu
2. ƒê·ªëi chi·∫øu v·ªõi s·ªë ƒëo c∆° th·ªÉ c·ªßa b·∫°n
3. N·∫øu n·∫±m gi·ªØa 2 size, ch·ªçn size l·ªõn h∆°n ƒë·ªÉ tho·∫£i m√°i
4. S·ª≠ d·ª•ng t√≠nh nƒÉng "Size Recommendation" ƒë·ªÉ ƒë∆∞·ª£c g·ª£i √Ω

L∆∞u √Ω: M·ªói th∆∞∆°ng hi·ªáu c√≥ ti√™u ch√≠ size kh√°c nhau.`,
      category: 'FAQ',
      tags: ['size', 'fit', 'bang-size', 'huong-dan'],
    },
    {
      slug: 'faq-payment-methods',
      title: 'H·ªó tr·ª£ nh·ªØng ph∆∞∆°ng th·ª©c thanh to√°n n√†o?',
      content: `Ch√∫ng t√¥i h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c thanh to√°n an to√†n:

1. Th·∫ª t√≠n d·ª•ng/ghi n·ª£: Visa, Mastercard, JCB
2. V√≠ ƒëi·ªán t·ª≠: Momo, ZaloPay, AirPay
3. Chuy·ªÉn kho·∫£n ng√¢n h√†ng: Chuy·ªÉn trong 1 gi·ªù
4. Thanh to√°n khi nh·∫≠n h√†ng (COD): √Åp d·ª•ng to√†n qu·ªëc, ph√≠ 15,000 VND

T·∫•t c·∫£ giao d·ªãch ƒë∆∞·ª£c m√£ h√≥a SSL b·∫£o m·∫≠t.`,
      category: 'FAQ',
      tags: ['thanh-toan', 'payment', 'the', 'vi-dien-tu'],
    },
    {
      slug: 'faq-exchange-policy',
      title: 'C√≥ th·ªÉ ƒë·ªïi size kh√¥ng?',
      content: `C√≥, b·∫°n ho√†n to√†n c√≥ th·ªÉ ƒë·ªïi size!

ƒêi·ªÅu ki·ªán ƒë·ªïi:
- Trong v√≤ng 15 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng
- H√†ng ph·∫£i ·ªü t√¨nh tr·∫°ng nguy√™n b·∫£n
- Ch∆∞a s·ª≠ d·ª•ng ho·∫∑c gi·∫∑t

Chi ph√≠ ƒë·ªïi:
- ƒê·ªïi c√πng size/m√†u/s·∫£n ph·∫©m: Mi·ªÖn ph√≠
- ƒê·ªïi size kh√°c: Mi·ªÖn ph√≠ (ch√∫ng t√¥i ch·ªãu ph√≠ v·∫≠n chuy·ªÉn)

Quy tr√¨nh:
1. Li√™n h·ªá CS ƒë·ªÉ th√¥ng b√°o mu·ªën ƒë·ªïi
2. Nh·∫≠n nh√£n v·∫≠n chuy·ªÉn mi·ªÖn ph√≠
3. G·ª≠i h√†ng v·ªÅ
4. Nh·∫≠n h√†ng m·ªõi trong 3-5 ng√†y`,
      category: 'FAQ',
      tags: ['doi', 'exchange', 'size-khac'],
    },
    // POLICIES
    {
      slug: 'policy-customer-protection',
      title: 'Ch√≠nh s√°ch b·∫£o v·ªá kh√°ch h√†ng',
      content: `CH√çNH S√ÅCH B·∫¢O V·ªÜ KH√ÅCH H√ÄNG - 100% AN TO√ÄN

1. Quy·ªÅn b·∫£o v·ªá
   - M·ªçi kh√°ch h√†ng ƒë∆∞·ª£c b·∫£o v·ªá t·ªëi ƒëa 100% n·∫øu s·∫£n ph·∫©m kh√¥ng ph√π h·ª£p m√¥ t·∫£
   - Ch√∫ng t√¥i cam k·∫øt h√†ng ch√≠nh h√£ng 100%

2. Ho√†n ti·ªÅn
   - Ho√†n ti·ªÅn trong 5-7 ng√†y l√†m vi·ªác
   - Kh√¥ng c√¢u h·ªèi, kh√¥ng ph·ª©c t·∫°p
   - Ho√†n l·∫°i to√†n b·ªô s·ªë ti·ªÅn thanh to√°n

3. Kh√¥ng h·ªèi l√Ω do
   - B·∫°n kh√¥ng c·∫ßn gi·∫£i th√≠ch v√¨ sao mu·ªën tr·∫£
   - Ch√∫ng t√¥i tin t∆∞·ªüng kh√°ch h√†ng

4. Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn
   - Ho√†n tr·∫£ mi·ªÖn ph√≠ cho kh√°ch h√†ng
   - Ch√∫ng t√¥i cung c·∫•p nh√£n v·∫≠n chuy·ªÉn

5. H·ªó tr·ª£ 24/7
   - Email: support@shop.vn
   - Live chat tr√™n website`,
      category: 'POLICY',
      tags: ['bao-ve', 'customer-protection', 'chinh-sach'],
    },
    {
      slug: 'policy-data-security',
      title: 'Ch√≠nh s√°ch b·∫£o m·∫≠t d·ªØ li·ªáu',
      content: `CH√çNH S√ÅCH B·∫¢O M·∫¨T D·ªÆ LI·ªÜU C√Å NH√ÇN

1. B·∫£o v·ªá th√¥ng tin c√° nh√¢n
   - Kh√¥ng chia s·∫ª th√¥ng tin v·ªõi b√™n th·ª© ba
   - Ch·ªâ d√πng cho x·ª≠ l√Ω ƒë∆°n h√†ng
   - Kh√¥ng g·ª≠i qu·∫£ng c√°o n·∫øu kh√¥ng ƒë·ªìng √Ω

2. M√£ h√≥a d·ªØ li·ªáu
   - M√£ h√≥a SSL cho t·∫•t c·∫£ giao d·ªãch
   - Database ƒë∆∞·ª£c b·∫£o v·ªá nhi·ªÅu l·ªõp
   - Backup h√†ng ng√†y

3. Quy·ªÅn c·ªßa kh√°ch h√†ng
   - Quy·ªÅn truy c·∫≠p: Xem d·ªØ li·ªáu c·ªßa b·∫°n
   - Quy·ªÅn s·ª≠a: C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
   - Quy·ªÅn x√≥a: Y√™u c·∫ßu x√≥a d·ªØ li·ªáu

4. Tu√¢n th·ªß ph√°p lu·∫≠t
   - GDPR Compliant (EU)
   - Tu√¢n th·ªß lu·∫≠t Vi·ªát Nam`,
      category: 'POLICY',
      tags: ['bao-mat', 'data-security', 'privacy'],
    },
  ];

  for (const content of siteContents) {
    await prisma.site_contents.upsert({
      where: { slug: content.slug },
      update: {
        title: content.title,
        content: content.content,
        category: content.category,
        tags: content.tags,
      },
      create: {
        slug: content.slug,
        title: content.title,
        content: content.content,
        category: content.category,
        tags: content.tags,
        status: true,
      },
    });
  }

  console.log(`‚úÖ Seeded ${siteContents.length} site contents`);

  console.log('‚úÖ Seed completed successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
