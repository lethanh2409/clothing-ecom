generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ENUM
enum product_status {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

/// ROLES
model roles {
  role_id     Int      @id @default(autoincrement())
  role_name   String   @unique
  description String?
  status      Boolean  @default(true)

  user_role   user_role[]

  @@map("roles")
}

/// USERS
model users {
  user_id       Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  email         String    @unique
  phone         String?
  full_name     String?
  status        Boolean   @default(true)
  refresh_token String?
  expired_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  user_role     user_role[]
  customers     customers?
  order_status_history order_status_history[]

  @@map("users")
}

/// USER_ROLE
model user_role {
  user_role_id Int  @id @default(autoincrement())
  user_id      Int
  role_id      Int

  users users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  roles roles @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@unique([user_id, role_id])

  @@map("user_role")
}


enum Gender {
  male
  female
  other
  unisex

  @@map("customers_gender_enum")
}
/// CUSTOMERS
model customers {
  customer_id Int       @id @default(autoincrement())
  user_id     Int       @unique
  birthday    DateTime?
  gender      Gender?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  users      users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  addresses  addresses[]
  cart       cart?
  orders     orders[]
  reviews    reviews[]
  returns    returns[]  

  @@map("customers")
}


/// ADDRESSES
model addresses {
  address_id      Int      @id @default(autoincrement())
  customer_id     Int
  consignee_name  String
  consignee_phone String
  province        String?
  district        String?
  ward            String?
  street          String?
  house_num       String?
  is_default      Boolean  @default(false)
  status          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  customers customers @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  orders    orders[]

  @@map("addresses")
}

/// BRANDS
model brands {
  brand_id    Int      @id @default(autoincrement())
  brand_name  String
  status      Boolean  @default(true)
  slug        String?  @unique
  description String?
  logo_url    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products    products[]
  sizes       sizes[]

  @@map("brands")
}

/// CATEGORIES
model categories {
  category_id  Int       @id @default(autoincrement())
  category_name String
  parent_id    Int?
  status       Boolean   @default(true)
  slug         String?   @unique
  description  String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  products products[]
  sizes    sizes[]

  parent   categories? @relation("CategoryParent", fields: [parent_id], references: [category_id])
  children categories[] @relation("CategoryParent")

  @@map("categories")
}

/// LOOKBOOKS
model lookbooks {
  lookbook_id Int      @id @default(autoincrement())
  title       String
  slug        String?  @unique
  description String?
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  lookbook_items lookbook_items[]

  @@map("lookbooks")
}

/// PRODUCTS
model products {
  product_id   Int             @id @default(autoincrement())
  brand_id     Int?
  category_id  Int?
  product_name String
  slug         String?         @unique
  description  String?
  status       product_status  @default(ACTIVE)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt

  brands     brands?     @relation(fields: [brand_id], references: [brand_id])
  categories categories? @relation(fields: [category_id], references: [category_id])
  product_variants product_variants[]

  @@map("products")
}

/// PRODUCT_VARIANTS
model product_variants {
  variant_id  Int      @id @default(autoincrement())
  product_id  Int
  sku         String   @unique
  barcode     String?
  cost_price  Decimal?
  base_price  Decimal?
  quantity    Int      @default(0)
  status      Boolean  @default(true)
  attribute   Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products  products  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  variant_assets variant_assets[]
  lookbook_items lookbook_items[]
  order_detail   order_detail[]
  inventory_transactions inventory_transactions[]
  return_detail return_detail[]

  // thêm dòng này để match với cart_detail
  cart_detail cart_detail[]

  @@map("product_variants")
}

/// LOOKBOOK_ITEMS
model lookbook_items {
  item_id     Int @id @default(autoincrement())
  lookbook_id Int
  variant_id  Int
  position    Int?
  note        String?

  lookbooks lookbooks @relation(fields: [lookbook_id], references: [lookbook_id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)

  @@unique([lookbook_id, variant_id])

  @@map("lookbook_items")
}

/// VARIANT_ASSETS
model variant_assets {
  asset_id   Int @id @default(autoincrement())
  variant_id Int
  url        String?
  type       String?
  is_primary Boolean @default(false)

  product_variants product_variants @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)

  @@unique([variant_id, url])
  @@map("variant_assets")
}

/// SIZES
model sizes {
  size_id     Int      @id @default(autoincrement())
  brand_id    Int?
  category_id Int?
  size_label  String
  size_type   String?
  measurements Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  brands     brands?     @relation(fields: [brand_id], references: [brand_id])
  categories categories? @relation(fields: [category_id], references: [category_id])

  @@unique([brand_id, category_id, size_label])
  @@map("sizes")
}

/// VOUCHERS
model vouchers {
  voucher_id        Int      @id @default(autoincrement())
  title             String
  description       String?
  discount_type     String
  discount_value    Decimal
  min_order_value   Decimal?
  max_discount      Decimal?
  quantity          Int      @default(0)
  used_count        Int      @default(0)
  per_customer_limit Int     @default(1)
  start_date        DateTime?
  end_date          DateTime?
  status            Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  orders orders[]

  @@map("vouchers")
}

/// CART
model cart {
  cart_id     Int      @id @default(autoincrement())
  customer_id Int      @unique
  session_id  String?
  updated_at  DateTime @default(now())
  total_price Decimal  @default(0)

  customers customers @relation(fields: [customer_id], references: [customer_id])
  cart_detail cart_detail[]

  @@map("cart")
}

/// CART_DETAIL
model cart_detail {
  cart_detail_id Int @id @default(autoincrement())
  cart_id        Int
  variant_id     Int
  sub_price      Decimal
  quantity       Int

  cart            cart            @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [variant_id], references: [variant_id])

  @@unique([cart_id, variant_id])
  @@map("cart_detail")
}

/// ORDERS
model orders {
  order_id       Int      @id @default(autoincrement())
  customer_id    Int?
  address_id     Int?
  total_price    Decimal?
  shipping_fee   Decimal?
  note           String?
  payment_status String   @default("pending")
  order_status   String   @default("pending")
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  voucher_id     Int?

  customers customers? @relation(fields: [customer_id], references: [customer_id])
  addresses addresses? @relation(fields: [address_id], references: [address_id])
  vouchers  vouchers?  @relation(fields: [voucher_id], references: [voucher_id])
  order_detail order_detail[]
  order_status_history order_status_history[]
  payments payments[]
  inventory_transactions inventory_transactions[]

  @@map("orders")
}

/// ORDER_STATUS_HISTORY
model order_status_history {
  order_update_id Int @id @default(autoincrement())
  order_id Int
  user_id  Int?
  status   String
  created_at DateTime @default(now())

  orders orders @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  users  users? @relation(fields: [user_id], references: [user_id])

  @@map("order_status_history")
}

/// ORDER_DETAIL
model order_detail {
  order_detail_id Int @id @default(autoincrement())
  order_id Int
  variant_id Int
  quantity Int
  total_price Decimal
  discount_price Decimal @default(0)

  orders orders @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [variant_id], references: [variant_id])
  reviews reviews[]
  return_detail return_detail[]

  @@map("order_detail")
}

/// PAYMENTS
model payments {
  payment_id     Int      @id @default(autoincrement())
  order_id       Int
  method         String?
  status         String?
  transaction_id String?
  amount         Decimal?
  raw_response   Json?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  orders orders @relation(fields: [order_id], references: [order_id], onDelete: Cascade)

  @@map("payments")
}

/// INVENTORY_TRANSACTIONS
model inventory_transactions {
  inventory_id Int @id @default(autoincrement())
  variant_id   Int
  change_quantity Int
  reason       String?
  order_id     Int?
  created_at   DateTime @default(now())

  product_variants product_variants @relation(fields: [variant_id], references: [variant_id])
  orders orders? @relation(fields: [order_id], references: [order_id])

  @@map("inventory_transactions")
}

/// RETURNS
model returns {
  return_id     Int      @id @default(autoincrement())
  return_type   String
  customer_id   Int?                        // 👈 link với customers
  reason        String?
  status        String   @default("requested")
  image         String?
  refund_amount Decimal  @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  customers     customers? @relation(fields: [customer_id], references: [customer_id])
  return_detail return_detail[]

  @@map("returns")
}


/// RETURN_DETAIL
model return_detail {
  return_detail_id Int @id @default(autoincrement())
  return_id Int
  order_detail_id Int
  new_variant_id Int?
  quantity Int

  returns returns @relation(fields: [return_id], references: [return_id], onDelete: Cascade)
  order_detail order_detail @relation(fields: [order_detail_id], references: [order_detail_id])
  product_variants product_variants? @relation(fields: [new_variant_id], references: [variant_id])

  @@map("return_detail")
}

/// REVIEWS
model reviews {
  review_id      Int      @id @default(autoincrement())
  customer_id    Int
  order_detail_id Int
  rating         Int
  comment        String?
  image          String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  status         Boolean  @default(true)

  customers customers @relation(fields: [customer_id], references: [customer_id])
  order_detail order_detail @relation(fields: [order_detail_id], references: [order_detail_id])

  @@map("reviews")
}
